name: "New version release"

on:
  push:
    branches:
      - master

jobs: 
  lint:
    if: github.event.head_commit.message !='Automatic fixes coding style by Laravel Pint'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [8.3]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: json, dom, curl, libxml, mbstring
          coverage: none
 
      - name: Install Pint
        run: composer global require laravel/pint
 
      - name: Run Pint
        run: pint
 
      - name: Commit linted files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Automatic fixes coding style by Laravel Pint"

  release:
    needs: lint  # Этот параметр гарантирует, что джоба 'release' выполнится после 'lint'
    if: github.event.head_commit.message !='Automatic fixes coding style by Laravel Pint'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release version
        id: get_latest_release
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GIT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Bump version
        id: bump_version
        run: |
          latest_version=${{ steps.get_latest_release.outputs.release  }}
          echo "Current latest version: $latest_version"

           # Extract the major and minor parts of the version
          major_version=$(echo $latest_version | cut -d '.' -f 1)
          minor_version=$(echo $latest_version | cut -d '.' -f 2)

          # Increment the minor version
          new_minor_version=$((minor_version + 1))

          # Combine the major and new minor version to get the new version
          new_version="$major_version.$new_minor_version"

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          name: ${{ env.new_version }}
          tag: ${{ env.new_version }}
          draft: false
          prerelease: false
